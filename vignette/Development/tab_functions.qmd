---
title: "Tab Functions"
author: "Josiah and Conner"
format: html
---

```{r}
library(tidyverse)

development_data <- read_csv("../../data/data_final.csv")
```

# ggplot theme

```{r}
theme_development <- function(){
  theme_bw() %+replace%
  theme(axis.title = element_text(size = 14),
        axis.text = element_text(size = 12),
        legend.title = element_text(size = 14),
        legend.text = element_text(size = 12))
}
```

# Country comparison tab

## Algorithm for similar countries

```{r}
get_divergence_examples <- function(COUNTRY1, INDICATOR1){
  # some countries don't have data for some columns
  if(all(is.na(development_data[[INDICATOR1]][development_data[["Country name"]] == COUNTRY1]))){
    stop(str_c("No values of ", INDICATOR1, " for ", COUNTRY1, ". Please choose another variable or another country."))
  }
  
  # get similar countries within 10 percentile-ranks of country 1 in the beginning
  similar_countries <- development_data %>%
    mutate(indicator1 = .[[INDICATOR1]]) %>%
    select(`Country name`, Year, indicator1) %>%
    drop_na(indicator1) %>%
    filter(Year == min(Year[.[["Country name"]] == COUNTRY1])) %>%
    mutate(percentile = ntile(indicator1, 100)) %>%
    filter(percentile < percentile[.[["Country name"]] == COUNTRY1] + 10, 
           percentile > percentile[.[["Country name"]] == COUNTRY1] - 10) %>% 
    pull(`Country name`)
  
  # within those similar countries, get top 3 most different countries today
  divergent_countries <- development_data %>%
    mutate(indicator1 = .[[INDICATOR1]]) %>%
    select(`Country name`, Year, indicator1) %>%
    drop_na(indicator1) %>%
    filter(Year == max(Year[.[["Country name"]] == COUNTRY1])) %>%
    mutate(percentile = ntile(indicator1, 100),
           difference = abs(percentile - percentile[.[["Country name"]] == COUNTRY1])) %>%
    filter(`Country name` %in% similar_countries) %>%
    arrange(desc(difference)) %>%
    slice_head(n = 3) %>%
    pull(`Country name`)
  
  str_c("Suggested: ", str_c(divergent_countries, collapse = ", "))
}
```

## Plots

```{r}
COUNTRIES <- c("Costa Rica", "Panama")
INDICATORS <- c("GDP per capita", "HDI")
VIEW <- "Difference"
NORMALIZE <- TRUE
YEAR <- 1990

plot_tab2 <- function(COUNTRIES, INDICATORS, VIEW, NORMALIZE, YEAR) {
  # error checking: some countries don't have data for some columns
  missing_data_cases <- development_data %>%
    rename(country = "Country name") %>%
    pivot_longer(-c(country:Year), names_to = "indicator", values_to = "value") %>%
    drop_na(value) %>%
    select(country, indicator) %>%
    filter(country %in% COUNTRIES, indicator %in% INDICATORS) %>%
    distinct %>%
    mutate(has_values = 1) %>%
    right_join(data.frame(country = rep(COUNTRIES, each = length(INDICATORS)),
                          indicator = rep(INDICATORS, length(COUNTRIES)))) %>%
    filter(is.na(has_values))
  if (nrow(missing_data_cases) > 0) {
    warning("No values of ", missing_data_cases$indicator, " for ", missing_data_cases$country, ".")
  }
  
  plot_data <- development_data %>%
    pivot_longer(-c(`Country name`:Year), names_to = "indicator", values_to = "value") %>%
    select(`Country name`, Year, indicator, value) %>%
    filter(`Country name` %in% COUNTRIES, indicator %in% INDICATORS)
  
  if (NORMALIZE) {
    baseline_data <- plot_data %>%
      group_by(`Country name`, indicator) %>%
      filter(Year == YEAR) %>%
      rename("baseline" = "value") %>%
      select(-Year)
    
    plot_data <- plot_data %>%
      left_join(baseline_data, by = c("Country name", "indicator")) %>%
      mutate(value = value / baseline * 100) %>%
      select(-baseline)
  }
  
  facet_labeller <- function(x) {
    if (VIEW == "Difference") {
      x <- str_c(x, ", ", COUNTRIES[2], " - ", COUNTRIES[1])
    }
    if (NORMALIZE) {
      x <- str_c(x, ", normalized at ", if_else(VIEW == "Difference", 0, 100), " in ", YEAR)
    }
  }
  
  if (VIEW == "Difference") {
    plot_data %>%
      pivot_wider(names_from = `Country name`, values_from = value) %>%
      mutate(difference = .[[COUNTRIES[2]]] - .[[COUNTRIES[1]]]) %>%
      ggplot(aes(x = Year, y = difference)) +
      geom_line() +
      facet_wrap(~indicator, scales = "free", ncol = 1, strip.position = "top", labeller = as_labeller(facet_labeller)) +
      theme_development() %+replace%
      theme(axis.title.y = element_blank(),
            legend.title = element_blank(),
            legend.position = "top",
            strip.placement = "outside",
            strip.text = element_text(size = 12, hjust = 0),
            strip.background = element_rect(fill = NA, color = NA))
  }
  
  else {
    plot_data %>%
      ggplot(aes(x = Year, y = value, color = `Country name`)) +
      geom_line() +
      facet_wrap(~indicator, scales = "free", ncol = 1, strip.position = "left") +
      theme_development() %+replace%
      theme(axis.title.y = element_blank(),
            legend.title = element_blank(),
            legend.position = "top",
            strip.placement = "outside",
            strip.text = element_text(size = 14),
            strip.background = element_rect(fill = NA, color = NA))
  }
}
```

# Development visualizer tab

```{r}
Dev_visualizer <- function(data, x_var, y_var, color_var, size_var, year_range, log_x = FALSE, log_y = FALSE, add_reg_line = FALSE) {
  
  # Filter the data based on the year range
  data <- data %>% filter(Year >= year_range[1], Year <= year_range[2])
  
  # Prepare variables for ggplot (handling spaces in variable names)
  x_var_plot <- ifelse(grepl(" ", x_var), paste0("`", x_var, "`"), x_var)
  y_var_plot <- ifelse(grepl(" ", y_var), paste0("`", y_var, "`"), y_var)
  color_var_plot <- ifelse(grepl(" ", color_var), paste0("`", color_var, "`"), color_var)
  size_var_plot <- ifelse(grepl(" ", size_var), paste0("`", size_var, "`"), size_var)

  # Apply log transformation if selected
  if (log_x) {
    data[[x_var]] <- log1p(data[[x_var]])
  }
  if (log_y) {
    data[[y_var]] <- log1p(data[[y_var]])
  }

  # Create scatter plot with size coding
  p <- ggplot(data, aes_string(x = x_var_plot, y = y_var_plot)) +
    geom_point(aes_string(color = color_var_plot, size = size_var_plot)) +
    theme_minimal() +
    labs(x = x_var, y = y_var)

  # Add a single regression line for the whole plot if selected
  if (add_reg_line) {
    p <- p + geom_smooth(method = "lm", se = FALSE)
  }

  # Remove legend for size if not a chosen variable
  if (size_var == "None") {
    p <- p + guides(size = FALSE)
  }

  return(p)
}
```

# DV Plots

```{r}
# Sample inputs
x_var <- "GDP per capita"  
y_var <- "HDI"       
color_var <- "Region" 
size_var <- "Population"  # This should be another variable in your dataset
year_range <- c(1960, 2021)  # This should be controlled by a slider input in your Shiny app
log_x <- TRUE              
log_y <- FALSE             
add_reg_line <- TRUE       

# Generate scatter plot
scatter_plot <- Dev_visualizer(data = development_data, 
                               x_var = x_var, 
                               y_var = y_var, 
                               color_var = color_var, 
                               size_var = size_var,
                               year_range = year_range,
                               log_x = log_x, 
                               log_y = log_y, 
                               add_reg_line = add_reg_line)

# Print the plot
print(scatter_plot)
```

